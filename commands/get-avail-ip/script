#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: gogrid:get-avail-ip: "Get an available IP Address thru the REST API"
#/ usage: rerun gogrid:get-avail-ip  --apikey <The API key used to authenticate to GoGrid>  --secret <> [ --type <>] 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh get-avail-ip || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: gogrid:get-avail-ip. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: APIKEY SECRET TYPE

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------

#./api.sh | ./jq  -r '[ .list[] | .state.name as $state | .public as $ispublic | if $state == "Unassigned" and $ispublic then  .  else empty end ][0]|.ip'

#api method to use
#METHOD='/grid/ip/list?ip.type=Public'

case ${TYPE} in
   "Public")
       ipParam="ip.type=${TYPE}"
      ;;
   "Private")
       ipParam="ip.type=${TYPE}"
      ;;
   "")
       ipParam=""
      ;;
   *)
       rerun_die "Invalid type: ${TYPE}"
      ;;
esac

METHOD="/grid/ip/list?${ipParam}"

#
# jq executable
#
JQ="$(which jq)"

if  [ -z "${JQ}" ]
then
   rerun_die "Unable to find the jq command"
fi

rerun gogrid:api --apikey "${APIKEY}" --secret "${SECRET}" --method "${METHOD}" | \
   jq  -r '[ .list[] | .state.name as $state | .public as $ispublic | if $state == "Unassigned" then  .  else empty end ][0]|.ip'

#./api.sh | ./jq  -r '[ .list[] | .state.name as $state | .public as $ispublic | if $state == "Unassigned" and $ispublic then  .  else empty end ][0]|.ip'

# Done. Exit with last command exit status.
exit $?

